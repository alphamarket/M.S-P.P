<!DOCTYPE html>
<html>
<head>
<title>Basics</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
</head>
<body>
<pre><code>#include &quot;jsoncons/json.hpp&quot;

using jsoncons::json;
using jsoncons::pretty_print;
using std::string;
</code></pre>

<h2>Constructing a json value</h2>
<h3>From a string</h3>
<pre><code>string input = &quot;{\&quot;first_name\&quot;:\&quot;Jane\&quot;,\&quot;last_name\&quot;:\&quot;Roe\&quot;,\&quot;events_attended\&quot;:10}&quot;;

json val = json::parse_string(input);

std::cout &lt;&lt; val &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>{&quot;events_attended&quot;:10,&quot;first_name&quot;:&quot;Jane&quot;,&quot;last_name&quot;:&quot;Roe&quot;}
</code></pre>

<p>Note that on output, object members are sorted alphabetically by name.</p>
<h3>From a file</h3>
<p>The input file is</p>
<pre><code>{
    // Members
    &quot;members&quot; : [
        {
            &quot;first_name&quot;:&quot;Jane&quot;,
            &quot;last_name&quot;:&quot;Roe&quot;,
            &quot;events_attended&quot;:10,
            &quot;accept_waiver_of_liability&quot; : true
        },
        {
             &quot;first_name&quot;:&quot;John&quot;,
             &quot;last_name&quot;:&quot;Doe&quot;,
             &quot;events_attended&quot;:2,
             &quot;accept_waiver_of_liability&quot; : true
         }
    ]
}
</code></pre>

<p><code>members.json</code></p>
<pre><code>json val = json::parse_file(&quot;members.json&quot;);

std::cout &lt;&lt; pretty_print(val) &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>{
    &quot;members&quot;:
    [
        {
            &quot;accept_waiver_of_liability&quot;:true,
            &quot;events_attended&quot;:10,
            &quot;first_name&quot;:&quot;Jane&quot;,
            &quot;last_name&quot;:&quot;Roe&quot;
        },
        {
            &quot;accept_waiver_of_liability&quot;:true,
            &quot;events_attended&quot;:2,
            &quot;first_name&quot;:&quot;John&quot;,
            &quot;last_name&quot;:&quot;Doe&quot;
        }
    ]
}
</code></pre>

<p>Note that the parser accepts and ignores the single line comment that starts with the marker <code>//</code>.</p>
<h3>With code</h3>
<pre><code>// A boolean value
json flag(true);

// A numeric value
json number(10.5);

// An object value with four members
json obj;
obj[&quot;first_name&quot;] = &quot;Jane&quot;;
obj[&quot;last_name&quot;] = &quot;Roe&quot;;
obj[&quot;events_attended&quot;] = 10;
obj[&quot;accept_waiver_of_liability&quot;] = true;

// An array value with four elements
json arr(json::an_array);
arr.add(json::null);
arr.add(flag);
arr.add(number);
arr.add(obj);

std::cout &lt;&lt; pretty_print(arr) &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>[null,true,10.5,
    {
        &quot;accept_waiver_of_liability&quot;:true,
        &quot;events_attended&quot;:10,
        &quot;first_name&quot;:&quot;Jane&quot;,
        &quot;last_name&quot;:&quot;Roe&quot;
    }
]
</code></pre>

<h3>From containers such as std::vector or std::list</h3>
<pre><code>std::vector&lt;int&gt; vec;
vec.push_back(10);
vec.push_back(20);
vec.push_back(30);

json val1(vec.begin(), vec.end());
std::cout &lt;&lt; val1 &lt;&lt; std::endl;

std::list&lt;double&gt; list;
list.push_back(10.5);
list.push_back(20.5);
list.push_back(30.5);

json val2(list.begin(), list.end());
std::cout &lt;&lt; val2 &lt;&lt; std::endl;
</code></pre>

<p>The output is </p>
<pre><code>[10,20,30]
[10.5,20.5,30.5]
</code></pre>

<h2>Accessing object members and array elements</h2>
<h3>Accessing object members</h3>
<pre><code>json obj;
obj[&quot;first_name&quot;] = &quot;Jane&quot;;
obj[&quot;last_name&quot;] = &quot;Roe&quot;;
obj[&quot;events_attended&quot;] = 10;
obj[&quot;accept_waiver_of_liability&quot;] = true;

string first_name = obj[&quot;first_name&quot;].as&lt;string&gt;();
string last_name = obj.at(&quot;last_name&quot;).as&lt;string&gt;();
int events_attended = obj[&quot;events_attended&quot;].as&lt;int&gt;();
bool accept_waiver_of_liability = obj[&quot;accept_waiver_of_liability&quot;].as&lt;bool&gt;();

std::cout &lt;&lt; first_name &lt;&lt; &quot; &quot; &lt;&lt; last_name &lt;&lt; &quot;, &quot; &lt;&lt; events_attended 
          &lt;&lt; &quot;, &quot; &lt;&lt; accept_waiver_of_liability &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>Jane Roe, 10, 1
</code></pre>

<h3>Missing values and defaults</h3>
<pre><code>json obj;
obj[&quot;first_name&quot;] = &quot;Jane&quot;;
obj[&quot;last_name&quot;] = &quot;Roe&quot;;

try
{
    string experience = obj[&quot;outdoor_experience&quot;].as&lt;string&gt;();
}
catch (const json_exception&amp; e)
{
    std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
}

string experience = obj.has_member(&quot;outdoor_experience&quot;) ? obj[&quot;outdoor_experience&quot;].as&lt;string&gt;() : &quot;&quot;;

bool first_aid_certification = obj.get(&quot;first_aid_certification&quot;,false).as&lt;bool&gt;();

std::cout &lt;&lt; &quot;experience=&quot; &lt;&lt; experience &lt;&lt; &quot;, first_aid_certification=&quot; &lt;&lt; first_aid_certification &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>Member outdoor_experience not found.
experience=, first_aid_certification=0
</code></pre>

<h3>Iterating over the members of an object</h3>
<pre><code>json obj;
obj[&quot;first_name&quot;] = &quot;Jane&quot;;
obj[&quot;last_name&quot;] = &quot;Roe&quot;;
obj[&quot;events_attended&quot;] = 10;
obj[&quot;accept_waiver_of_liability&quot;] = true;

for (auto it = obj.begin_members(); it != obj.end_members(); ++it)
{
    std::cout &lt;&lt; &quot;name=&quot; &lt;&lt; it-&gt;name() &lt;&lt; &quot;, value=&quot; &lt;&lt; it-&gt;value().as&lt;string&gt;() &lt;&lt; std::endl;
}
</code></pre>

<p>The output is</p>
<pre><code>name=accept_waiver_of_liability, value=true
name=events_attended, value=10
name=first_name, value=Jane
name=last_name, value=Roe
</code></pre>

<h3>Iterating over the elements of an array</h3>
<pre><code>json arr(json::an_array);
arr.add(&quot;Montreal&quot;);
arr.add(&quot;Toronto&quot;);
arr.add(&quot;Ottawa&quot;);
arr.add(&quot;Vancouver&quot;);

for (auto it = arr.begin_elements(); it != arr.end_elements(); ++it)
{
    std::cout &lt;&lt; it-&gt;as&lt;string&gt;() &lt;&lt; std::endl;
}
</code></pre>

<p>The output is</p>
<pre><code>Montreal
Toronto
Ottawa
Vancouver
</code></pre>


</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
