<!DOCTYPE html>
<html>
<head>
<title>Arrays</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
</head>
<body>
<pre><code>#include &quot;jsoncons/json.hpp&quot;

using jsoncons::json;
using jsoncons::pretty_print;
</code></pre>

<h3>Creating an array of elements</h3>
<pre><code>json cities(json::an_array);       // an empty array
std::cout &lt;&lt; cities &lt;&lt; std::endl;  // output is &quot;[]&quot;

cities.add(&quot;Toronto&quot;);  
cities.add(&quot;Vancouver&quot;);
cities.add(0,&quot;Montreal&quot;);  // inserts &quot;Montreal&quot; at beginning of array

std::cout &lt;&lt; cities &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>[]
[&quot;Montreal&quot;,&quot;Toronto&quot;,&quot;Vancouver&quot;]
</code></pre>

<h3>Creating an array of elements with reserved storage</h3>
<pre><code>json cities(json::an_array);  
cities.reserve(10);  // storage is reserved
std::cout &lt;&lt; &quot;capacity=&quot; &lt;&lt; cities.capacity() &lt;&lt; &quot;, size=&quot; &lt;&lt; cities.size() &lt;&lt; std::endl;

cities.add(&quot;Toronto&quot;);  
cities.add(&quot;Vancouver&quot;);
cities.add(0,&quot;Montreal&quot;);
std::cout &lt;&lt; &quot;capacity=&quot; &lt;&lt; cities.capacity() &lt;&lt; &quot;, size=&quot; &lt;&lt; cities.size() &lt;&lt; std::endl;

std::cout &lt;&lt; cities &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>capacity=10, size=0
capacity=10, size=3
[&quot;Montreal&quot;,&quot;Toronto&quot;,&quot;Vancouver&quot;]
</code></pre>

<h3>Accessing a <code>json</code> value as a <code>std::vector</code></h3>
<pre><code>std::string s = &quot;{\&quot;my-array\&quot; : [1,2,3,4]}&quot;;
json val = json::parse_string(s);
std::vector&lt;int&gt; v = val[&quot;my-array&quot;].as&lt;std::vector&lt;int&gt;&gt;();
for (size_t i = 0; i &lt; v.size(); ++i)
{
    if (i &gt; 0)
    {
        std::cout &lt;&lt; &quot;,&quot;;
    }
    std::cout &lt;&lt; v[i]; 
}
std::cout &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>1,2,3,4
</code></pre>

<h3>Making an array of size 10 initialized with zeros</h3>
<pre><code>json a = json::make_array&lt;1&gt;(10,0);
a[1] = 1;
a[2] = 2;
std::cout &lt;&lt; pretty_print(a) &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>[0,1,2,0,0,0,0,0,0,0]
</code></pre>

<h3>Making a two dimensional array of size 3x4 initialized with zeros</h3>
<pre><code>json a = json::make_array&lt;2&gt;(3,4,0);
a[0][0] = &quot;Tenor&quot;;
a[0][1] = &quot;ATM vol&quot;;
a[0][2] = &quot;25-d-MS&quot;;
a[0][3] = &quot;25-d-RR&quot;;
a[1][0] = &quot;1Y&quot;;
a[1][1] = 0.20;
a[1][2] = 0.009;
a[1][3] = -0.006;
a[2][0] = &quot;2Y&quot;;
a[2][1] = 0.18;
a[2][2] = 0.009;
a[2][3] = -0.005;

std::cout &lt;&lt; pretty_print(a) &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>[
    [&quot;Tenor&quot;,&quot;ATM vol&quot;,&quot;25-d-MS&quot;,&quot;25-d-RR&quot;],
    [&quot;1Y&quot;,0.2,0.009,-0.006],
    [&quot;2Y&quot;,0.18,0.009,-0.005]
]
</code></pre>

<h3>Making a three dimensional array of size 4x3x2 initialized with zeros</h3>
<pre><code>json a = json::make_array&lt;3&gt;(4,3,2,0);
a[0][2][0] = 2;
a[0][2][1] = 3;
std::cout &lt;&lt; pretty_print(a) &lt;&lt; std::endl;
</code></pre>

<p>The output is</p>
<pre><code>[
    [
        [0,0],
        [0,0],
        [2,3]
    ],
    [
        [0,0],
        [0,0],
        [0,0]
    ],
    [
        [0,0],
        [0,0],
        [0,0]
    ],
    [
        [0,0],
        [0,0],
        [0,0]
    ]
]
</code></pre>


</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
